# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Profile {
  id: ID!
  username: String
  publicId: String
  publicReadableId: String
  email: String
  permissions(where: PermissionWhereInput! = {}, orderBy: [PermissionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Permission!]
  permissionsCount(where: PermissionWhereInput! = {}): Int
  info: JSON
  isPublic: Boolean
  password: PasswordState
  image: ProfileImage
  bio: String
  facebook: String
  twitter: String
  instagram: String
  publicMail: String
  website: String
  location: String
  dateCreated: DateTime
  language: String
  studiesInfo: JSON
  participantIn(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  participantInCount(where: StudyWhereInput! = {}): Int
  teacherIn(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  teacherInCount(where: ClassWhereInput! = {}): Int
  mentorIn(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  mentorInCount(where: ClassWhereInput! = {}): Int
  studentIn(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  studentInCount(where: ClassWhereInput! = {}): Int
  classNetworksCreated(where: ClassNetworkWhereInput! = {}, orderBy: [ClassNetworkOrderByInput!]! = [], take: Int, skip: Int! = 0): [ClassNetwork!]
  classNetworksCreatedCount(where: ClassNetworkWhereInput! = {}): Int
  journals(where: JournalWhereInput! = {}, orderBy: [JournalOrderByInput!]! = [], take: Int, skip: Int! = 0): [Journal!]
  journalsCount(where: JournalWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  authorOfTalk(where: TalkWhereInput! = {}, orderBy: [TalkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Talk!]
  authorOfTalkCount(where: TalkWhereInput! = {}): Int
  memberOfTalk(where: TalkWhereInput! = {}, orderBy: [TalkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Talk!]
  memberOfTalkCount(where: TalkWhereInput! = {}): Int
  authorOfWord(where: WordWhereInput! = {}, orderBy: [WordOrderByInput!]! = [], take: Int, skip: Int! = 0): [Word!]
  authorOfWordCount(where: WordWhereInput! = {}): Int
  templates(where: TemplateWhereInput! = {}, orderBy: [TemplateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Template!]
  templatesCount(where: TemplateWhereInput! = {}): Int
  collaboratorInTemplate(where: TemplateWhereInput! = {}, orderBy: [TemplateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Template!]
  collaboratorInTemplateCount(where: TemplateWhereInput! = {}): Int
  taskCreatorIn(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  taskCreatorInCount(where: TaskWhereInput! = {}): Int
  collaboratorInTask(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  collaboratorInTaskCount(where: TaskWhereInput! = {}): Int
  researcherIn(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  researcherInCount(where: StudyWhereInput! = {}): Int
  collaboratorInStudy(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  collaboratorInStudyCount(where: StudyWhereInput! = {}): Int
  consentCreatorIn(where: ConsentWhereInput! = {}, orderBy: [ConsentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Consent!]
  consentCreatorInCount(where: ConsentWhereInput! = {}): Int
  collaboratorInConsent(where: ConsentWhereInput! = {}, orderBy: [ConsentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Consent!]
  collaboratorInConsentCount(where: ConsentWhereInput! = {}): Int
  creatorOfProposal(where: ProposalBoardWhereInput! = {}, orderBy: [ProposalBoardOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProposalBoard!]
  creatorOfProposalCount(where: ProposalBoardWhereInput! = {}): Int
  authorOfProposal(where: ProposalBoardWhereInput! = {}, orderBy: [ProposalBoardOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProposalBoard!]
  authorOfProposalCount(where: ProposalBoardWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  assignedToProposalCard(where: ProposalCardWhereInput! = {}, orderBy: [ProposalCardOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProposalCard!]
  assignedToProposalCardCount(where: ProposalCardWhereInput! = {}): Int
  updates(where: UpdateWhereInput! = {}, orderBy: [UpdateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Update!]
  updatesCount(where: UpdateWhereInput! = {}): Int
  authorOfLesson(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Lesson!]
  authorOfLessonCount(where: LessonWhereInput! = {}): Int
  collaboratorInLesson(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Lesson!]
  collaboratorInLessonCount(where: LessonWhereInput! = {}): Int
  authorOfCurriculum(where: CurriculumWhereInput! = {}, orderBy: [CurriculumOrderByInput!]! = [], take: Int, skip: Int! = 0): [Curriculum!]
  authorOfCurriculumCount(where: CurriculumWhereInput! = {}): Int
  collaboratorInCurriculum(where: CurriculumWhereInput! = {}, orderBy: [CurriculumOrderByInput!]! = [], take: Int, skip: Int! = 0): [Curriculum!]
  collaboratorInCurriculumCount(where: CurriculumWhereInput! = {}): Int
  authorOfAssignment(where: AssignmentWhereInput! = {}, orderBy: [AssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Assignment!]
  authorOfAssignmentCount(where: AssignmentWhereInput! = {}): Int
  authorOfResource(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Resource!]
  authorOfResourceCount(where: ResourceWhereInput! = {}): Int
  authorOfHomework(where: HomeworkWhereInput! = {}, orderBy: [HomeworkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Homework!]
  authorOfHomeworkCount(where: HomeworkWhereInput! = {}): Int
  datasets(where: DatasetWhereInput! = {}, orderBy: [DatasetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Dataset!]
  datasetsCount(where: DatasetWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ProfileWhereUniqueInput {
  id: ID
  publicId: String
  publicReadableId: String
  email: String
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IDFilter
  username: StringFilter
  publicId: StringFilter
  publicReadableId: StringFilter
  email: StringFilter
  permissions: PermissionManyRelationFilter
  isPublic: BooleanFilter
  image: ProfileImageWhereInput
  bio: StringFilter
  facebook: StringFilter
  twitter: StringFilter
  instagram: StringFilter
  publicMail: StringFilter
  website: StringFilter
  location: StringFilter
  dateCreated: DateTimeNullableFilter
  language: StringNullableFilter
  participantIn: StudyManyRelationFilter
  teacherIn: ClassManyRelationFilter
  mentorIn: ClassManyRelationFilter
  studentIn: ClassManyRelationFilter
  classNetworksCreated: ClassNetworkManyRelationFilter
  journals: JournalManyRelationFilter
  posts: PostManyRelationFilter
  authorOfTalk: TalkManyRelationFilter
  memberOfTalk: TalkManyRelationFilter
  authorOfWord: WordManyRelationFilter
  templates: TemplateManyRelationFilter
  collaboratorInTemplate: TemplateManyRelationFilter
  taskCreatorIn: TaskManyRelationFilter
  collaboratorInTask: TaskManyRelationFilter
  researcherIn: StudyManyRelationFilter
  collaboratorInStudy: StudyManyRelationFilter
  consentCreatorIn: ConsentManyRelationFilter
  collaboratorInConsent: ConsentManyRelationFilter
  creatorOfProposal: ProposalBoardManyRelationFilter
  authorOfProposal: ProposalBoardManyRelationFilter
  reviews: ReviewManyRelationFilter
  assignedToProposalCard: ProposalCardManyRelationFilter
  updates: UpdateManyRelationFilter
  authorOfLesson: LessonManyRelationFilter
  collaboratorInLesson: LessonManyRelationFilter
  authorOfCurriculum: CurriculumManyRelationFilter
  collaboratorInCurriculum: CurriculumManyRelationFilter
  authorOfAssignment: AssignmentManyRelationFilter
  authorOfResource: ResourceManyRelationFilter
  authorOfHomework: HomeworkManyRelationFilter
  datasets: DatasetManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PermissionManyRelationFilter {
  every: PermissionWhereInput
  some: PermissionWhereInput
  none: PermissionWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input StudyManyRelationFilter {
  every: StudyWhereInput
  some: StudyWhereInput
  none: StudyWhereInput
}

input ClassManyRelationFilter {
  every: ClassWhereInput
  some: ClassWhereInput
  none: ClassWhereInput
}

input ClassNetworkManyRelationFilter {
  every: ClassNetworkWhereInput
  some: ClassNetworkWhereInput
  none: ClassNetworkWhereInput
}

input JournalManyRelationFilter {
  every: JournalWhereInput
  some: JournalWhereInput
  none: JournalWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input TalkManyRelationFilter {
  every: TalkWhereInput
  some: TalkWhereInput
  none: TalkWhereInput
}

input WordManyRelationFilter {
  every: WordWhereInput
  some: WordWhereInput
  none: WordWhereInput
}

input TemplateManyRelationFilter {
  every: TemplateWhereInput
  some: TemplateWhereInput
  none: TemplateWhereInput
}

input TaskManyRelationFilter {
  every: TaskWhereInput
  some: TaskWhereInput
  none: TaskWhereInput
}

input ConsentManyRelationFilter {
  every: ConsentWhereInput
  some: ConsentWhereInput
  none: ConsentWhereInput
}

input ProposalBoardManyRelationFilter {
  every: ProposalBoardWhereInput
  some: ProposalBoardWhereInput
  none: ProposalBoardWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input ProposalCardManyRelationFilter {
  every: ProposalCardWhereInput
  some: ProposalCardWhereInput
  none: ProposalCardWhereInput
}

input UpdateManyRelationFilter {
  every: UpdateWhereInput
  some: UpdateWhereInput
  none: UpdateWhereInput
}

input LessonManyRelationFilter {
  every: LessonWhereInput
  some: LessonWhereInput
  none: LessonWhereInput
}

input CurriculumManyRelationFilter {
  every: CurriculumWhereInput
  some: CurriculumWhereInput
  none: CurriculumWhereInput
}

input AssignmentManyRelationFilter {
  every: AssignmentWhereInput
  some: AssignmentWhereInput
  none: AssignmentWhereInput
}

input ResourceManyRelationFilter {
  every: ResourceWhereInput
  some: ResourceWhereInput
  none: ResourceWhereInput
}

input HomeworkManyRelationFilter {
  every: HomeworkWhereInput
  some: HomeworkWhereInput
  none: HomeworkWhereInput
}

input DatasetManyRelationFilter {
  every: DatasetWhereInput
  some: DatasetWhereInput
  none: DatasetWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input ProfileOrderByInput {
  id: OrderDirection
  username: OrderDirection
  publicId: OrderDirection
  publicReadableId: OrderDirection
  email: OrderDirection
  isPublic: OrderDirection
  bio: OrderDirection
  facebook: OrderDirection
  twitter: OrderDirection
  instagram: OrderDirection
  publicMail: OrderDirection
  website: OrderDirection
  location: OrderDirection
  dateCreated: OrderDirection
  language: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ProfileUpdateInput {
  username: String
  publicId: String
  publicReadableId: String
  email: String
  permissions: PermissionRelateToManyForUpdateInput
  info: JSON
  isPublic: Boolean
  password: String
  image: ProfileImageRelateToOneForUpdateInput
  bio: String
  facebook: String
  twitter: String
  instagram: String
  publicMail: String
  website: String
  location: String
  dateCreated: DateTime
  language: String
  studiesInfo: JSON
  participantIn: StudyRelateToManyForUpdateInput
  teacherIn: ClassRelateToManyForUpdateInput
  mentorIn: ClassRelateToManyForUpdateInput
  studentIn: ClassRelateToManyForUpdateInput
  classNetworksCreated: ClassNetworkRelateToManyForUpdateInput
  journals: JournalRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  authorOfTalk: TalkRelateToManyForUpdateInput
  memberOfTalk: TalkRelateToManyForUpdateInput
  authorOfWord: WordRelateToManyForUpdateInput
  templates: TemplateRelateToManyForUpdateInput
  collaboratorInTemplate: TemplateRelateToManyForUpdateInput
  taskCreatorIn: TaskRelateToManyForUpdateInput
  collaboratorInTask: TaskRelateToManyForUpdateInput
  researcherIn: StudyRelateToManyForUpdateInput
  collaboratorInStudy: StudyRelateToManyForUpdateInput
  consentCreatorIn: ConsentRelateToManyForUpdateInput
  collaboratorInConsent: ConsentRelateToManyForUpdateInput
  creatorOfProposal: ProposalBoardRelateToManyForUpdateInput
  authorOfProposal: ProposalBoardRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  assignedToProposalCard: ProposalCardRelateToManyForUpdateInput
  updates: UpdateRelateToManyForUpdateInput
  authorOfLesson: LessonRelateToManyForUpdateInput
  collaboratorInLesson: LessonRelateToManyForUpdateInput
  authorOfCurriculum: CurriculumRelateToManyForUpdateInput
  collaboratorInCurriculum: CurriculumRelateToManyForUpdateInput
  authorOfAssignment: AssignmentRelateToManyForUpdateInput
  authorOfResource: ResourceRelateToManyForUpdateInput
  authorOfHomework: HomeworkRelateToManyForUpdateInput
  datasets: DatasetRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input PermissionRelateToManyForUpdateInput {
  disconnect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

input ProfileImageRelateToOneForUpdateInput {
  create: ProfileImageCreateInput
  connect: ProfileImageWhereUniqueInput
  disconnect: Boolean
}

input StudyRelateToManyForUpdateInput {
  disconnect: [StudyWhereUniqueInput!]
  set: [StudyWhereUniqueInput!]
  create: [StudyCreateInput!]
  connect: [StudyWhereUniqueInput!]
}

input ClassRelateToManyForUpdateInput {
  disconnect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  create: [ClassCreateInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassNetworkRelateToManyForUpdateInput {
  disconnect: [ClassNetworkWhereUniqueInput!]
  set: [ClassNetworkWhereUniqueInput!]
  create: [ClassNetworkCreateInput!]
  connect: [ClassNetworkWhereUniqueInput!]
}

input JournalRelateToManyForUpdateInput {
  disconnect: [JournalWhereUniqueInput!]
  set: [JournalWhereUniqueInput!]
  create: [JournalCreateInput!]
  connect: [JournalWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TalkRelateToManyForUpdateInput {
  disconnect: [TalkWhereUniqueInput!]
  set: [TalkWhereUniqueInput!]
  create: [TalkCreateInput!]
  connect: [TalkWhereUniqueInput!]
}

input WordRelateToManyForUpdateInput {
  disconnect: [WordWhereUniqueInput!]
  set: [WordWhereUniqueInput!]
  create: [WordCreateInput!]
  connect: [WordWhereUniqueInput!]
}

input TemplateRelateToManyForUpdateInput {
  disconnect: [TemplateWhereUniqueInput!]
  set: [TemplateWhereUniqueInput!]
  create: [TemplateCreateInput!]
  connect: [TemplateWhereUniqueInput!]
}

input TaskRelateToManyForUpdateInput {
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input ConsentRelateToManyForUpdateInput {
  disconnect: [ConsentWhereUniqueInput!]
  set: [ConsentWhereUniqueInput!]
  create: [ConsentCreateInput!]
  connect: [ConsentWhereUniqueInput!]
}

input ProposalBoardRelateToManyForUpdateInput {
  disconnect: [ProposalBoardWhereUniqueInput!]
  set: [ProposalBoardWhereUniqueInput!]
  create: [ProposalBoardCreateInput!]
  connect: [ProposalBoardWhereUniqueInput!]
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ProposalCardRelateToManyForUpdateInput {
  disconnect: [ProposalCardWhereUniqueInput!]
  set: [ProposalCardWhereUniqueInput!]
  create: [ProposalCardCreateInput!]
  connect: [ProposalCardWhereUniqueInput!]
}

input UpdateRelateToManyForUpdateInput {
  disconnect: [UpdateWhereUniqueInput!]
  set: [UpdateWhereUniqueInput!]
  create: [UpdateCreateInput!]
  connect: [UpdateWhereUniqueInput!]
}

input LessonRelateToManyForUpdateInput {
  disconnect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

input CurriculumRelateToManyForUpdateInput {
  disconnect: [CurriculumWhereUniqueInput!]
  set: [CurriculumWhereUniqueInput!]
  create: [CurriculumCreateInput!]
  connect: [CurriculumWhereUniqueInput!]
}

input AssignmentRelateToManyForUpdateInput {
  disconnect: [AssignmentWhereUniqueInput!]
  set: [AssignmentWhereUniqueInput!]
  create: [AssignmentCreateInput!]
  connect: [AssignmentWhereUniqueInput!]
}

input ResourceRelateToManyForUpdateInput {
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

input HomeworkRelateToManyForUpdateInput {
  disconnect: [HomeworkWhereUniqueInput!]
  set: [HomeworkWhereUniqueInput!]
  create: [HomeworkCreateInput!]
  connect: [HomeworkWhereUniqueInput!]
}

input DatasetRelateToManyForUpdateInput {
  disconnect: [DatasetWhereUniqueInput!]
  set: [DatasetWhereUniqueInput!]
  create: [DatasetCreateInput!]
  connect: [DatasetWhereUniqueInput!]
}

input ProfileUpdateArgs {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateInput!
}

input ProfileCreateInput {
  username: String
  publicId: String
  publicReadableId: String
  email: String
  permissions: PermissionRelateToManyForCreateInput
  info: JSON
  isPublic: Boolean
  password: String
  image: ProfileImageRelateToOneForCreateInput
  bio: String
  facebook: String
  twitter: String
  instagram: String
  publicMail: String
  website: String
  location: String
  dateCreated: DateTime
  language: String
  studiesInfo: JSON
  participantIn: StudyRelateToManyForCreateInput
  teacherIn: ClassRelateToManyForCreateInput
  mentorIn: ClassRelateToManyForCreateInput
  studentIn: ClassRelateToManyForCreateInput
  classNetworksCreated: ClassNetworkRelateToManyForCreateInput
  journals: JournalRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  authorOfTalk: TalkRelateToManyForCreateInput
  memberOfTalk: TalkRelateToManyForCreateInput
  authorOfWord: WordRelateToManyForCreateInput
  templates: TemplateRelateToManyForCreateInput
  collaboratorInTemplate: TemplateRelateToManyForCreateInput
  taskCreatorIn: TaskRelateToManyForCreateInput
  collaboratorInTask: TaskRelateToManyForCreateInput
  researcherIn: StudyRelateToManyForCreateInput
  collaboratorInStudy: StudyRelateToManyForCreateInput
  consentCreatorIn: ConsentRelateToManyForCreateInput
  collaboratorInConsent: ConsentRelateToManyForCreateInput
  creatorOfProposal: ProposalBoardRelateToManyForCreateInput
  authorOfProposal: ProposalBoardRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  assignedToProposalCard: ProposalCardRelateToManyForCreateInput
  updates: UpdateRelateToManyForCreateInput
  authorOfLesson: LessonRelateToManyForCreateInput
  collaboratorInLesson: LessonRelateToManyForCreateInput
  authorOfCurriculum: CurriculumRelateToManyForCreateInput
  collaboratorInCurriculum: CurriculumRelateToManyForCreateInput
  authorOfAssignment: AssignmentRelateToManyForCreateInput
  authorOfResource: ResourceRelateToManyForCreateInput
  authorOfHomework: HomeworkRelateToManyForCreateInput
  datasets: DatasetRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input PermissionRelateToManyForCreateInput {
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

input ProfileImageRelateToOneForCreateInput {
  create: ProfileImageCreateInput
  connect: ProfileImageWhereUniqueInput
}

input StudyRelateToManyForCreateInput {
  create: [StudyCreateInput!]
  connect: [StudyWhereUniqueInput!]
}

input ClassRelateToManyForCreateInput {
  create: [ClassCreateInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassNetworkRelateToManyForCreateInput {
  create: [ClassNetworkCreateInput!]
  connect: [ClassNetworkWhereUniqueInput!]
}

input JournalRelateToManyForCreateInput {
  create: [JournalCreateInput!]
  connect: [JournalWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TalkRelateToManyForCreateInput {
  create: [TalkCreateInput!]
  connect: [TalkWhereUniqueInput!]
}

input WordRelateToManyForCreateInput {
  create: [WordCreateInput!]
  connect: [WordWhereUniqueInput!]
}

input TemplateRelateToManyForCreateInput {
  create: [TemplateCreateInput!]
  connect: [TemplateWhereUniqueInput!]
}

input TaskRelateToManyForCreateInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input ConsentRelateToManyForCreateInput {
  create: [ConsentCreateInput!]
  connect: [ConsentWhereUniqueInput!]
}

input ProposalBoardRelateToManyForCreateInput {
  create: [ProposalBoardCreateInput!]
  connect: [ProposalBoardWhereUniqueInput!]
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ProposalCardRelateToManyForCreateInput {
  create: [ProposalCardCreateInput!]
  connect: [ProposalCardWhereUniqueInput!]
}

input UpdateRelateToManyForCreateInput {
  create: [UpdateCreateInput!]
  connect: [UpdateWhereUniqueInput!]
}

input LessonRelateToManyForCreateInput {
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

input CurriculumRelateToManyForCreateInput {
  create: [CurriculumCreateInput!]
  connect: [CurriculumWhereUniqueInput!]
}

input AssignmentRelateToManyForCreateInput {
  create: [AssignmentCreateInput!]
  connect: [AssignmentWhereUniqueInput!]
}

input ResourceRelateToManyForCreateInput {
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

input HomeworkRelateToManyForCreateInput {
  create: [HomeworkCreateInput!]
  connect: [HomeworkWhereUniqueInput!]
}

input DatasetRelateToManyForCreateInput {
  create: [DatasetCreateInput!]
  connect: [DatasetWhereUniqueInput!]
}

type ProfileImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  profile: Profile
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProfileImageWhereUniqueInput {
  id: ID
}

input ProfileImageWhereInput {
  AND: [ProfileImageWhereInput!]
  OR: [ProfileImageWhereInput!]
  NOT: [ProfileImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  profile: ProfileWhereInput
}

input ProfileImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProfileImageUpdateInput {
  image: Upload
  altText: String
  profile: ProfileRelateToOneForUpdateInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ProfileRelateToOneForUpdateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
}

input ProfileImageUpdateArgs {
  where: ProfileImageWhereUniqueInput!
  data: ProfileImageUpdateInput!
}

input ProfileImageCreateInput {
  image: Upload
  altText: String
  profile: ProfileRelateToOneForCreateInput
}

input ProfileRelateToOneForCreateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
}

type Permission {
  id: ID!
  name: String
  canManageUsers: Boolean
  assignedTo(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  assignedToCount(where: ProfileWhereInput! = {}): Int
}

input PermissionWhereUniqueInput {
  id: ID
  name: String
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageUsers: BooleanFilter
  assignedTo: ProfileManyRelationFilter
}

input ProfileManyRelationFilter {
  every: ProfileWhereInput
  some: ProfileWhereInput
  none: ProfileWhereInput
}

input PermissionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageUsers: OrderDirection
}

input PermissionUpdateInput {
  name: String
  canManageUsers: Boolean
  assignedTo: ProfileRelateToManyForUpdateInput
}

input ProfileRelateToManyForUpdateInput {
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  create: [ProfileCreateInput!]
  connect: [ProfileWhereUniqueInput!]
}

input PermissionUpdateArgs {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateInput!
}

input PermissionCreateInput {
  name: String
  canManageUsers: Boolean
  assignedTo: ProfileRelateToManyForCreateInput
}

input ProfileRelateToManyForCreateInput {
  create: [ProfileCreateInput!]
  connect: [ProfileWhereUniqueInput!]
}

type Class {
  id: ID!
  code: String
  title: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  settings: JSON
  mentors(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  mentorsCount(where: ProfileWhereInput! = {}): Int
  students(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  studentsCount(where: ProfileWhereInput! = {}): Int
  networks(where: ClassNetworkWhereInput! = {}, orderBy: [ClassNetworkOrderByInput!]! = [], take: Int, skip: Int! = 0): [ClassNetwork!]
  networksCount(where: ClassNetworkWhereInput! = {}): Int
  creator: Profile
  talks(where: TalkWhereInput! = {}, orderBy: [TalkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Talk!]
  talksCount(where: TalkWhereInput! = {}): Int
  studies(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  studiesCount(where: StudyWhereInput! = {}): Int
  assignments(where: AssignmentWhereInput! = {}, orderBy: [AssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Assignment!]
  assignmentsCount(where: AssignmentWhereInput! = {}): Int
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
}

input ClassWhereUniqueInput {
  id: ID
  code: String
}

input ClassWhereInput {
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
  id: IDFilter
  code: StringFilter
  title: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  mentors: ProfileManyRelationFilter
  students: ProfileManyRelationFilter
  networks: ClassNetworkManyRelationFilter
  creator: ProfileWhereInput
  talks: TalkManyRelationFilter
  studies: StudyManyRelationFilter
  assignments: AssignmentManyRelationFilter
  resources: ResourceManyRelationFilter
}

input ClassOrderByInput {
  id: OrderDirection
  code: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClassUpdateInput {
  code: String
  title: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  settings: JSON
  mentors: ProfileRelateToManyForUpdateInput
  students: ProfileRelateToManyForUpdateInput
  networks: ClassNetworkRelateToManyForUpdateInput
  creator: ProfileRelateToOneForUpdateInput
  talks: TalkRelateToManyForUpdateInput
  studies: StudyRelateToManyForUpdateInput
  assignments: AssignmentRelateToManyForUpdateInput
  resources: ResourceRelateToManyForUpdateInput
}

input ClassUpdateArgs {
  where: ClassWhereUniqueInput!
  data: ClassUpdateInput!
}

input ClassCreateInput {
  code: String
  title: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  settings: JSON
  mentors: ProfileRelateToManyForCreateInput
  students: ProfileRelateToManyForCreateInput
  networks: ClassNetworkRelateToManyForCreateInput
  creator: ProfileRelateToOneForCreateInput
  talks: TalkRelateToManyForCreateInput
  studies: StudyRelateToManyForCreateInput
  assignments: AssignmentRelateToManyForCreateInput
  resources: ResourceRelateToManyForCreateInput
}

type ClassNetwork {
  id: ID!
  title: String
  description: String
  settings: JSON
  creator: Profile
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassNetworkWhereUniqueInput {
  id: ID
  title: String
}

input ClassNetworkWhereInput {
  AND: [ClassNetworkWhereInput!]
  OR: [ClassNetworkWhereInput!]
  NOT: [ClassNetworkWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  creator: ProfileWhereInput
  classes: ClassManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ClassNetworkOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClassNetworkUpdateInput {
  title: String
  description: String
  settings: JSON
  creator: ProfileRelateToOneForUpdateInput
  classes: ClassRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClassNetworkUpdateArgs {
  where: ClassNetworkWhereUniqueInput!
  data: ClassNetworkUpdateInput!
}

input ClassNetworkCreateInput {
  title: String
  description: String
  settings: JSON
  creator: ProfileRelateToOneForCreateInput
  classes: ClassRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Report {
  id: ID!
  message: String
  dateCreated: DateTime
}

input ReportWhereUniqueInput {
  id: ID
}

input ReportWhereInput {
  AND: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
  id: IDFilter
  message: StringFilter
  dateCreated: DateTimeNullableFilter
}

input ReportOrderByInput {
  id: OrderDirection
  message: OrderDirection
  dateCreated: OrderDirection
}

input ReportUpdateInput {
  message: String
  dateCreated: DateTime
}

input ReportUpdateArgs {
  where: ReportWhereUniqueInput!
  data: ReportUpdateInput!
}

input ReportCreateInput {
  message: String
  dateCreated: DateTime
}

type Journal {
  id: ID!
  code: String
  title: String
  description: String
  creator: Profile
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  settings: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input JournalWhereUniqueInput {
  id: ID
  code: String
}

input JournalWhereInput {
  AND: [JournalWhereInput!]
  OR: [JournalWhereInput!]
  NOT: [JournalWhereInput!]
  id: IDFilter
  code: StringFilter
  title: StringFilter
  description: StringFilter
  creator: ProfileWhereInput
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input JournalOrderByInput {
  id: OrderDirection
  code: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input JournalUpdateInput {
  code: String
  title: String
  description: String
  creator: ProfileRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  settings: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input JournalUpdateArgs {
  where: JournalWhereUniqueInput!
  data: JournalUpdateInput!
}

input JournalCreateInput {
  code: String
  title: String
  description: String
  creator: ProfileRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  settings: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type Post {
  id: ID!
  title: String
  content: String
  author: Profile
  journal: Journal
  settings: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
  author: ProfileWhereInput
  journal: JournalWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  title: String
  content: String
  author: ProfileRelateToOneForUpdateInput
  journal: JournalRelateToOneForUpdateInput
  settings: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input JournalRelateToOneForUpdateInput {
  create: JournalCreateInput
  connect: JournalWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: String
  author: ProfileRelateToOneForCreateInput
  journal: JournalRelateToOneForCreateInput
  settings: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input JournalRelateToOneForCreateInput {
  create: JournalCreateInput
  connect: JournalWhereUniqueInput
}

type Talk {
  id: ID!
  author: Profile
  members(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  membersCount(where: ProfileWhereInput! = {}): Int
  words(where: WordWhereInput! = {}, orderBy: [WordOrderByInput!]! = [], take: Int, skip: Int! = 0): [Word!]
  wordsCount(where: WordWhereInput! = {}): Int
  settings: JSON
  studies(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  studiesCount(where: StudyWhereInput! = {}): Int
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TalkWhereUniqueInput {
  id: ID
}

input TalkWhereInput {
  AND: [TalkWhereInput!]
  OR: [TalkWhereInput!]
  NOT: [TalkWhereInput!]
  id: IDFilter
  author: ProfileWhereInput
  members: ProfileManyRelationFilter
  words: WordManyRelationFilter
  studies: StudyManyRelationFilter
  classes: ClassManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TalkOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TalkUpdateInput {
  author: ProfileRelateToOneForUpdateInput
  members: ProfileRelateToManyForUpdateInput
  words: WordRelateToManyForUpdateInput
  settings: JSON
  studies: StudyRelateToManyForUpdateInput
  classes: ClassRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TalkUpdateArgs {
  where: TalkWhereUniqueInput!
  data: TalkUpdateInput!
}

input TalkCreateInput {
  author: ProfileRelateToOneForCreateInput
  members: ProfileRelateToManyForCreateInput
  words: WordRelateToManyForCreateInput
  settings: JSON
  studies: StudyRelateToManyForCreateInput
  classes: ClassRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Word {
  id: ID!
  author: Profile
  talk: Talk
  message: String
  new: Boolean
  settings: JSON
  isMain: Boolean
  parent: Word
  children(where: WordWhereInput! = {}, orderBy: [WordOrderByInput!]! = [], take: Int, skip: Int! = 0): [Word!]
  childrenCount(where: WordWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input WordWhereUniqueInput {
  id: ID
}

input WordWhereInput {
  AND: [WordWhereInput!]
  OR: [WordWhereInput!]
  NOT: [WordWhereInput!]
  id: IDFilter
  author: ProfileWhereInput
  talk: TalkWhereInput
  message: StringFilter
  new: BooleanFilter
  isMain: BooleanFilter
  parent: WordWhereInput
  children: WordManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input WordOrderByInput {
  id: OrderDirection
  message: OrderDirection
  new: OrderDirection
  isMain: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input WordUpdateInput {
  author: ProfileRelateToOneForUpdateInput
  talk: TalkRelateToOneForUpdateInput
  message: String
  new: Boolean
  settings: JSON
  isMain: Boolean
  parent: WordRelateToOneForUpdateInput
  children: WordRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TalkRelateToOneForUpdateInput {
  create: TalkCreateInput
  connect: TalkWhereUniqueInput
  disconnect: Boolean
}

input WordRelateToOneForUpdateInput {
  create: WordCreateInput
  connect: WordWhereUniqueInput
  disconnect: Boolean
}

input WordUpdateArgs {
  where: WordWhereUniqueInput!
  data: WordUpdateInput!
}

input WordCreateInput {
  author: ProfileRelateToOneForCreateInput
  talk: TalkRelateToOneForCreateInput
  message: String
  new: Boolean
  settings: JSON
  isMain: Boolean
  parent: WordRelateToOneForCreateInput
  children: WordRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TalkRelateToOneForCreateInput {
  create: TalkCreateInput
  connect: TalkWhereUniqueInput
}

input WordRelateToOneForCreateInput {
  create: WordCreateInput
  connect: WordWhereUniqueInput
}

type Template {
  id: ID!
  title: String
  slug: String
  shortDescription: String
  description: String
  author: Profile
  collaborators(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  collaboratorsCount(where: ProfileWhereInput! = {}): Int
  parameters: JSON
  script: String
  style: String
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  tasksCount(where: TaskWhereInput! = {}): Int
  datasets(where: DatasetWhereInput! = {}, orderBy: [DatasetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Dataset!]
  datasetsCount(where: DatasetWhereInput! = {}): Int
  settings: JSON
  file: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TemplateWhereUniqueInput {
  id: ID
}

input TemplateWhereInput {
  AND: [TemplateWhereInput!]
  OR: [TemplateWhereInput!]
  NOT: [TemplateWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  shortDescription: StringFilter
  description: StringFilter
  author: ProfileWhereInput
  collaborators: ProfileManyRelationFilter
  script: StringFilter
  style: StringFilter
  tasks: TaskManyRelationFilter
  datasets: DatasetManyRelationFilter
  file: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TemplateOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  shortDescription: OrderDirection
  description: OrderDirection
  script: OrderDirection
  style: OrderDirection
  file: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TemplateUpdateInput {
  title: String
  slug: String
  shortDescription: String
  description: String
  author: ProfileRelateToOneForUpdateInput
  collaborators: ProfileRelateToManyForUpdateInput
  parameters: JSON
  script: String
  style: String
  tasks: TaskRelateToManyForUpdateInput
  datasets: DatasetRelateToManyForUpdateInput
  settings: JSON
  file: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TemplateUpdateArgs {
  where: TemplateWhereUniqueInput!
  data: TemplateUpdateInput!
}

input TemplateCreateInput {
  title: String
  slug: String
  shortDescription: String
  description: String
  author: ProfileRelateToOneForCreateInput
  collaborators: ProfileRelateToManyForCreateInput
  parameters: JSON
  script: String
  style: String
  tasks: TaskRelateToManyForCreateInput
  datasets: DatasetRelateToManyForCreateInput
  settings: JSON
  file: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Task {
  id: ID!
  title: String
  taskType: TaskTaskTypeType
  subtitle: String
  slug: String
  description: String
  descriptionForParticipants: String
  author: Profile
  collaborators(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  collaboratorsCount(where: ProfileWhereInput! = {}): Int
  template: Template
  parameters: JSON
  settings: JSON
  link: String
  public: Boolean
  submitForPublishing: Boolean
  isOriginal: Boolean
  isExternal: Boolean
  image: String
  largeImage: String
  consent(where: ConsentWhereInput! = {}, orderBy: [ConsentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Consent!]
  consentCount(where: ConsentWhereInput! = {}): Int
  datasets(where: DatasetWhereInput! = {}, orderBy: [DatasetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Dataset!]
  datasetsCount(where: DatasetWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum TaskTaskTypeType {
  TASK
  SURVEY
  BLOCK
}

input TaskWhereUniqueInput {
  id: ID
  slug: String
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: IDFilter
  title: StringFilter
  taskType: TaskTaskTypeTypeNullableFilter
  subtitle: StringFilter
  slug: StringFilter
  description: StringFilter
  descriptionForParticipants: StringFilter
  author: ProfileWhereInput
  collaborators: ProfileManyRelationFilter
  template: TemplateWhereInput
  link: StringFilter
  public: BooleanFilter
  submitForPublishing: BooleanFilter
  isOriginal: BooleanFilter
  isExternal: BooleanFilter
  image: StringFilter
  largeImage: StringFilter
  consent: ConsentManyRelationFilter
  datasets: DatasetManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TaskTaskTypeTypeNullableFilter {
  equals: TaskTaskTypeType
  in: [TaskTaskTypeType!]
  notIn: [TaskTaskTypeType!]
  not: TaskTaskTypeTypeNullableFilter
}

input TaskOrderByInput {
  id: OrderDirection
  title: OrderDirection
  taskType: OrderDirection
  subtitle: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  descriptionForParticipants: OrderDirection
  link: OrderDirection
  public: OrderDirection
  submitForPublishing: OrderDirection
  isOriginal: OrderDirection
  isExternal: OrderDirection
  image: OrderDirection
  largeImage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TaskUpdateInput {
  title: String
  taskType: TaskTaskTypeType
  subtitle: String
  slug: String
  description: String
  descriptionForParticipants: String
  author: ProfileRelateToOneForUpdateInput
  collaborators: ProfileRelateToManyForUpdateInput
  template: TemplateRelateToOneForUpdateInput
  parameters: JSON
  settings: JSON
  link: String
  public: Boolean
  submitForPublishing: Boolean
  isOriginal: Boolean
  isExternal: Boolean
  image: String
  largeImage: String
  consent: ConsentRelateToManyForUpdateInput
  datasets: DatasetRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TemplateRelateToOneForUpdateInput {
  create: TemplateCreateInput
  connect: TemplateWhereUniqueInput
  disconnect: Boolean
}

input TaskUpdateArgs {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input TaskCreateInput {
  title: String
  taskType: TaskTaskTypeType
  subtitle: String
  slug: String
  description: String
  descriptionForParticipants: String
  author: ProfileRelateToOneForCreateInput
  collaborators: ProfileRelateToManyForCreateInput
  template: TemplateRelateToOneForCreateInput
  parameters: JSON
  settings: JSON
  link: String
  public: Boolean
  submitForPublishing: Boolean
  isOriginal: Boolean
  isExternal: Boolean
  image: String
  largeImage: String
  consent: ConsentRelateToManyForCreateInput
  datasets: DatasetRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TemplateRelateToOneForCreateInput {
  create: TemplateCreateInput
  connect: TemplateWhereUniqueInput
}

type Study {
  id: ID!
  title: String
  slug: String
  description: String
  shortDescription: String
  image: StudyImage
  settings: JSON
  info: JSON
  public: Boolean
  featured: Boolean
  submitForPublishing: Boolean
  isHidden: Boolean
  components: JSON
  flow: JSON
  diagram: String
  author: Profile
  collaborators(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  collaboratorsCount(where: ProfileWhereInput! = {}): Int
  participants(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  participantsCount(where: ProfileWhereInput! = {}): Int
  consent(where: ConsentWhereInput! = {}, orderBy: [ConsentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Consent!]
  consentCount(where: ConsentWhereInput! = {}): Int
  proposal(where: ProposalBoardWhereInput! = {}, orderBy: [ProposalBoardOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProposalBoard!]
  proposalCount(where: ProposalBoardWhereInput! = {}): Int
  descriptionInProposalCard: ProposalCard
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  talks(where: TalkWhereInput! = {}, orderBy: [TalkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Talk!]
  talksCount(where: TalkWhereInput! = {}): Int
  datasets(where: DatasetWhereInput! = {}, orderBy: [DatasetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Dataset!]
  datasetsCount(where: DatasetWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input StudyWhereUniqueInput {
  id: ID
  slug: String
}

input StudyWhereInput {
  AND: [StudyWhereInput!]
  OR: [StudyWhereInput!]
  NOT: [StudyWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  shortDescription: StringFilter
  image: StudyImageWhereInput
  public: BooleanFilter
  featured: BooleanFilter
  submitForPublishing: BooleanFilter
  isHidden: BooleanFilter
  diagram: StringFilter
  author: ProfileWhereInput
  collaborators: ProfileManyRelationFilter
  participants: ProfileManyRelationFilter
  consent: ConsentManyRelationFilter
  proposal: ProposalBoardManyRelationFilter
  descriptionInProposalCard: ProposalCardWhereInput
  classes: ClassManyRelationFilter
  reviews: ReviewManyRelationFilter
  tags: TagManyRelationFilter
  talks: TalkManyRelationFilter
  datasets: DatasetManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input StudyOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  shortDescription: OrderDirection
  public: OrderDirection
  featured: OrderDirection
  submitForPublishing: OrderDirection
  isHidden: OrderDirection
  diagram: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input StudyUpdateInput {
  title: String
  slug: String
  description: String
  shortDescription: String
  image: StudyImageRelateToOneForUpdateInput
  settings: JSON
  info: JSON
  public: Boolean
  featured: Boolean
  submitForPublishing: Boolean
  isHidden: Boolean
  components: JSON
  flow: JSON
  diagram: String
  author: ProfileRelateToOneForUpdateInput
  collaborators: ProfileRelateToManyForUpdateInput
  participants: ProfileRelateToManyForUpdateInput
  consent: ConsentRelateToManyForUpdateInput
  proposal: ProposalBoardRelateToManyForUpdateInput
  descriptionInProposalCard: ProposalCardRelateToOneForUpdateInput
  classes: ClassRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  talks: TalkRelateToManyForUpdateInput
  datasets: DatasetRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input StudyImageRelateToOneForUpdateInput {
  create: StudyImageCreateInput
  connect: StudyImageWhereUniqueInput
  disconnect: Boolean
}

input ProposalCardRelateToOneForUpdateInput {
  create: ProposalCardCreateInput
  connect: ProposalCardWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input StudyUpdateArgs {
  where: StudyWhereUniqueInput!
  data: StudyUpdateInput!
}

input StudyCreateInput {
  title: String
  slug: String
  description: String
  shortDescription: String
  image: StudyImageRelateToOneForCreateInput
  settings: JSON
  info: JSON
  public: Boolean
  featured: Boolean
  submitForPublishing: Boolean
  isHidden: Boolean
  components: JSON
  flow: JSON
  diagram: String
  author: ProfileRelateToOneForCreateInput
  collaborators: ProfileRelateToManyForCreateInput
  participants: ProfileRelateToManyForCreateInput
  consent: ConsentRelateToManyForCreateInput
  proposal: ProposalBoardRelateToManyForCreateInput
  descriptionInProposalCard: ProposalCardRelateToOneForCreateInput
  classes: ClassRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  talks: TalkRelateToManyForCreateInput
  datasets: DatasetRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input StudyImageRelateToOneForCreateInput {
  create: StudyImageCreateInput
  connect: StudyImageWhereUniqueInput
}

input ProposalCardRelateToOneForCreateInput {
  create: ProposalCardCreateInput
  connect: ProposalCardWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type StudyImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  study: Study
}

input StudyImageWhereUniqueInput {
  id: ID
}

input StudyImageWhereInput {
  AND: [StudyImageWhereInput!]
  OR: [StudyImageWhereInput!]
  NOT: [StudyImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  study: StudyWhereInput
}

input StudyImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input StudyImageUpdateInput {
  image: Upload
  altText: String
  study: StudyRelateToOneForUpdateInput
}

input StudyRelateToOneForUpdateInput {
  create: StudyCreateInput
  connect: StudyWhereUniqueInput
  disconnect: Boolean
}

input StudyImageUpdateArgs {
  where: StudyImageWhereUniqueInput!
  data: StudyImageUpdateInput!
}

input StudyImageCreateInput {
  image: Upload
  altText: String
  study: StudyRelateToOneForCreateInput
}

input StudyRelateToOneForCreateInput {
  create: StudyCreateInput
  connect: StudyWhereUniqueInput
}

type Consent {
  id: ID!
  code: String
  title: String
  public: Boolean
  description: String
  organization: String
  info: JSON
  settings: JSON
  author: Profile
  collaborators(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  collaboratorsCount(where: ProfileWhereInput! = {}): Int
  studies(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  studiesCount(where: StudyWhereInput! = {}): Int
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  tasksCount(where: TaskWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ConsentWhereUniqueInput {
  id: ID
  code: String
}

input ConsentWhereInput {
  AND: [ConsentWhereInput!]
  OR: [ConsentWhereInput!]
  NOT: [ConsentWhereInput!]
  id: IDFilter
  code: StringFilter
  title: StringFilter
  public: BooleanFilter
  description: StringFilter
  organization: StringFilter
  author: ProfileWhereInput
  collaborators: ProfileManyRelationFilter
  studies: StudyManyRelationFilter
  tasks: TaskManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ConsentOrderByInput {
  id: OrderDirection
  code: OrderDirection
  title: OrderDirection
  public: OrderDirection
  description: OrderDirection
  organization: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ConsentUpdateInput {
  code: String
  title: String
  public: Boolean
  description: String
  organization: String
  info: JSON
  settings: JSON
  author: ProfileRelateToOneForUpdateInput
  collaborators: ProfileRelateToManyForUpdateInput
  studies: StudyRelateToManyForUpdateInput
  tasks: TaskRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ConsentUpdateArgs {
  where: ConsentWhereUniqueInput!
  data: ConsentUpdateInput!
}

input ConsentCreateInput {
  code: String
  title: String
  public: Boolean
  description: String
  organization: String
  info: JSON
  settings: JSON
  author: ProfileRelateToOneForCreateInput
  collaborators: ProfileRelateToManyForCreateInput
  studies: StudyRelateToManyForCreateInput
  tasks: TaskRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Update {
  id: ID!
  user: Profile
  updateArea: String
  link: String
  content: JSON
  hasOpen: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateWhereUniqueInput {
  id: ID
}

input UpdateWhereInput {
  AND: [UpdateWhereInput!]
  OR: [UpdateWhereInput!]
  NOT: [UpdateWhereInput!]
  id: IDFilter
  user: ProfileWhereInput
  updateArea: StringFilter
  link: StringFilter
  hasOpen: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UpdateOrderByInput {
  id: OrderDirection
  updateArea: OrderDirection
  link: OrderDirection
  hasOpen: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UpdateUpdateInput {
  user: ProfileRelateToOneForUpdateInput
  updateArea: String
  link: String
  content: JSON
  hasOpen: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateUpdateArgs {
  where: UpdateWhereUniqueInput!
  data: UpdateUpdateInput!
}

input UpdateCreateInput {
  user: ProfileRelateToOneForCreateInput
  updateArea: String
  link: String
  content: JSON
  hasOpen: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type Dataset {
  id: ID!
  token: String
  profile: Profile
  template: Template
  task: Task
  study: Study
  dataPolicy: String
  info: JSON
  isCompleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input DatasetWhereUniqueInput {
  id: ID
  token: String
}

input DatasetWhereInput {
  AND: [DatasetWhereInput!]
  OR: [DatasetWhereInput!]
  NOT: [DatasetWhereInput!]
  id: IDFilter
  token: StringFilter
  profile: ProfileWhereInput
  template: TemplateWhereInput
  task: TaskWhereInput
  study: StudyWhereInput
  dataPolicy: StringFilter
  isCompleted: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DatasetOrderByInput {
  id: OrderDirection
  token: OrderDirection
  dataPolicy: OrderDirection
  isCompleted: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DatasetUpdateInput {
  token: String
  profile: ProfileRelateToOneForUpdateInput
  template: TemplateRelateToOneForUpdateInput
  task: TaskRelateToOneForUpdateInput
  study: StudyRelateToOneForUpdateInput
  dataPolicy: String
  info: JSON
  isCompleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input TaskRelateToOneForUpdateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
  disconnect: Boolean
}

input DatasetUpdateArgs {
  where: DatasetWhereUniqueInput!
  data: DatasetUpdateInput!
}

input DatasetCreateInput {
  token: String
  profile: ProfileRelateToOneForCreateInput
  template: TemplateRelateToOneForCreateInput
  task: TaskRelateToOneForCreateInput
  study: StudyRelateToOneForCreateInput
  dataPolicy: String
  info: JSON
  isCompleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input TaskRelateToOneForCreateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
}

type ProposalBoard {
  id: ID!
  title: String
  slug: String
  description: String
  isTemplate: Boolean
  isSubmitted: Boolean
  checklist: JSON
  settings: JSON
  creator: Profile
  author: Profile
  study: Study
  sections(where: ProposalSectionWhereInput! = {}, orderBy: [ProposalSectionOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProposalSection!]
  sectionsCount(where: ProposalSectionWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProposalBoardWhereUniqueInput {
  id: ID
  slug: String
}

input ProposalBoardWhereInput {
  AND: [ProposalBoardWhereInput!]
  OR: [ProposalBoardWhereInput!]
  NOT: [ProposalBoardWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  isTemplate: BooleanFilter
  isSubmitted: BooleanFilter
  creator: ProfileWhereInput
  author: ProfileWhereInput
  study: StudyWhereInput
  sections: ProposalSectionManyRelationFilter
  reviews: ReviewManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProposalSectionManyRelationFilter {
  every: ProposalSectionWhereInput
  some: ProposalSectionWhereInput
  none: ProposalSectionWhereInput
}

input ProposalBoardOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  isTemplate: OrderDirection
  isSubmitted: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProposalBoardUpdateInput {
  title: String
  slug: String
  description: String
  isTemplate: Boolean
  isSubmitted: Boolean
  checklist: JSON
  settings: JSON
  creator: ProfileRelateToOneForUpdateInput
  author: ProfileRelateToOneForUpdateInput
  study: StudyRelateToOneForUpdateInput
  sections: ProposalSectionRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProposalSectionRelateToManyForUpdateInput {
  disconnect: [ProposalSectionWhereUniqueInput!]
  set: [ProposalSectionWhereUniqueInput!]
  create: [ProposalSectionCreateInput!]
  connect: [ProposalSectionWhereUniqueInput!]
}

input ProposalBoardUpdateArgs {
  where: ProposalBoardWhereUniqueInput!
  data: ProposalBoardUpdateInput!
}

input ProposalBoardCreateInput {
  title: String
  slug: String
  description: String
  isTemplate: Boolean
  isSubmitted: Boolean
  checklist: JSON
  settings: JSON
  creator: ProfileRelateToOneForCreateInput
  author: ProfileRelateToOneForCreateInput
  study: StudyRelateToOneForCreateInput
  sections: ProposalSectionRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProposalSectionRelateToManyForCreateInput {
  create: [ProposalSectionCreateInput!]
  connect: [ProposalSectionWhereUniqueInput!]
}

type ProposalSection {
  id: ID!
  title: String
  description: String
  position: Float
  board: ProposalBoard
  cards(where: ProposalCardWhereInput! = {}, orderBy: [ProposalCardOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProposalCard!]
  cardsCount(where: ProposalCardWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProposalSectionWhereUniqueInput {
  id: ID
}

input ProposalSectionWhereInput {
  AND: [ProposalSectionWhereInput!]
  OR: [ProposalSectionWhereInput!]
  NOT: [ProposalSectionWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  position: FloatNullableFilter
  board: ProposalBoardWhereInput
  cards: ProposalCardManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input ProposalSectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  position: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProposalSectionUpdateInput {
  title: String
  description: String
  position: Float
  board: ProposalBoardRelateToOneForUpdateInput
  cards: ProposalCardRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProposalBoardRelateToOneForUpdateInput {
  create: ProposalBoardCreateInput
  connect: ProposalBoardWhereUniqueInput
  disconnect: Boolean
}

input ProposalSectionUpdateArgs {
  where: ProposalSectionWhereUniqueInput!
  data: ProposalSectionUpdateInput!
}

input ProposalSectionCreateInput {
  title: String
  description: String
  position: Float
  board: ProposalBoardRelateToOneForCreateInput
  cards: ProposalCardRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProposalBoardRelateToOneForCreateInput {
  create: ProposalBoardCreateInput
  connect: ProposalBoardWhereUniqueInput
}

type ProposalCard {
  id: ID!
  title: String
  description: String
  position: Float
  content: String
  comment: String
  settings: JSON
  section: ProposalSection
  assignedTo(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  assignedToCount(where: ProfileWhereInput! = {}): Int
  studyDescription(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  studyDescriptionCount(where: StudyWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProposalCardWhereUniqueInput {
  id: ID
}

input ProposalCardWhereInput {
  AND: [ProposalCardWhereInput!]
  OR: [ProposalCardWhereInput!]
  NOT: [ProposalCardWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  position: FloatNullableFilter
  content: StringFilter
  comment: StringFilter
  section: ProposalSectionWhereInput
  assignedTo: ProfileManyRelationFilter
  studyDescription: StudyManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProposalCardOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  position: OrderDirection
  content: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProposalCardUpdateInput {
  title: String
  description: String
  position: Float
  content: String
  comment: String
  settings: JSON
  section: ProposalSectionRelateToOneForUpdateInput
  assignedTo: ProfileRelateToManyForUpdateInput
  studyDescription: StudyRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProposalSectionRelateToOneForUpdateInput {
  create: ProposalSectionCreateInput
  connect: ProposalSectionWhereUniqueInput
  disconnect: Boolean
}

input ProposalCardUpdateArgs {
  where: ProposalCardWhereUniqueInput!
  data: ProposalCardUpdateInput!
}

input ProposalCardCreateInput {
  title: String
  description: String
  position: Float
  content: String
  comment: String
  settings: JSON
  section: ProposalSectionRelateToOneForCreateInput
  assignedTo: ProfileRelateToManyForCreateInput
  studyDescription: StudyRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProposalSectionRelateToOneForCreateInput {
  create: ProposalSectionCreateInput
  connect: ProposalSectionWhereUniqueInput
}

type Review {
  id: ID!
  author: Profile
  study: Study
  proposal: ProposalBoard
  settings: JSON
  content: JSON
  stage: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  author: ProfileWhereInput
  study: StudyWhereInput
  proposal: ProposalBoardWhereInput
  stage: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  stage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ReviewUpdateInput {
  author: ProfileRelateToOneForUpdateInput
  study: StudyRelateToOneForUpdateInput
  proposal: ProposalBoardRelateToOneForUpdateInput
  settings: JSON
  content: JSON
  stage: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  author: ProfileRelateToOneForCreateInput
  study: StudyRelateToOneForCreateInput
  proposal: ProposalBoardRelateToOneForCreateInput
  settings: JSON
  content: JSON
  stage: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Curriculum {
  id: ID!
  title: String
  slug: String
  description: String
  diagram: String
  author: Profile
  collaborators(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  collaboratorsCount(where: ProfileWhereInput! = {}): Int
  settings: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input CurriculumWhereUniqueInput {
  id: ID
  slug: String
}

input CurriculumWhereInput {
  AND: [CurriculumWhereInput!]
  OR: [CurriculumWhereInput!]
  NOT: [CurriculumWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  diagram: StringFilter
  author: ProfileWhereInput
  collaborators: ProfileManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CurriculumOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  diagram: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CurriculumUpdateInput {
  title: String
  slug: String
  description: String
  diagram: String
  author: ProfileRelateToOneForUpdateInput
  collaborators: ProfileRelateToManyForUpdateInput
  settings: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input CurriculumUpdateArgs {
  where: CurriculumWhereUniqueInput!
  data: CurriculumUpdateInput!
}

input CurriculumCreateInput {
  title: String
  slug: String
  description: String
  diagram: String
  author: ProfileRelateToOneForCreateInput
  collaborators: ProfileRelateToManyForCreateInput
  settings: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type Lesson {
  id: ID!
  title: String
  slug: String
  description: String
  type: String
  content: String
  settings: JSON
  author: Profile
  collaborators(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  collaboratorsCount(where: ProfileWhereInput! = {}): Int
  isPublic: Boolean
  isFeatured: Boolean
  parent: Lesson
  children(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Lesson!]
  childrenCount(where: LessonWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input LessonWhereUniqueInput {
  id: ID
  slug: String
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  type: StringFilter
  content: StringFilter
  author: ProfileWhereInput
  collaborators: ProfileManyRelationFilter
  isPublic: BooleanFilter
  isFeatured: BooleanFilter
  parent: LessonWhereInput
  children: LessonManyRelationFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LessonOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  type: OrderDirection
  content: OrderDirection
  isPublic: OrderDirection
  isFeatured: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LessonUpdateInput {
  title: String
  slug: String
  description: String
  type: String
  content: String
  settings: JSON
  author: ProfileRelateToOneForUpdateInput
  collaborators: ProfileRelateToManyForUpdateInput
  isPublic: Boolean
  isFeatured: Boolean
  parent: LessonRelateToOneForUpdateInput
  children: LessonRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LessonRelateToOneForUpdateInput {
  create: LessonCreateInput
  connect: LessonWhereUniqueInput
  disconnect: Boolean
}

input LessonUpdateArgs {
  where: LessonWhereUniqueInput!
  data: LessonUpdateInput!
}

input LessonCreateInput {
  title: String
  slug: String
  description: String
  type: String
  content: String
  settings: JSON
  author: ProfileRelateToOneForCreateInput
  collaborators: ProfileRelateToManyForCreateInput
  isPublic: Boolean
  isFeatured: Boolean
  parent: LessonRelateToOneForCreateInput
  children: LessonRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LessonRelateToOneForCreateInput {
  create: LessonCreateInput
  connect: LessonWhereUniqueInput
}

type Tag {
  id: ID!
  title: String
  slug: String
  description: String
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Lesson!]
  lessonsCount(where: LessonWhereInput! = {}): Int
  assignments(where: AssignmentWhereInput! = {}, orderBy: [AssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Assignment!]
  assignmentsCount(where: AssignmentWhereInput! = {}): Int
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
  homeworks(where: HomeworkWhereInput! = {}, orderBy: [HomeworkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Homework!]
  homeworksCount(where: HomeworkWhereInput! = {}): Int
  studies(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  studiesCount(where: StudyWhereInput! = {}): Int
  level: Int
  parent: Tag
  children(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  childrenCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
  slug: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  lessons: LessonManyRelationFilter
  assignments: AssignmentManyRelationFilter
  resources: ResourceManyRelationFilter
  homeworks: HomeworkManyRelationFilter
  studies: StudyManyRelationFilter
  level: IntNullableFilter
  parent: TagWhereInput
  children: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  level: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  title: String
  slug: String
  description: String
  lessons: LessonRelateToManyForUpdateInput
  assignments: AssignmentRelateToManyForUpdateInput
  resources: ResourceRelateToManyForUpdateInput
  homeworks: HomeworkRelateToManyForUpdateInput
  studies: StudyRelateToManyForUpdateInput
  level: Int
  parent: TagRelateToOneForUpdateInput
  children: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TagRelateToOneForUpdateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
  disconnect: Boolean
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  title: String
  slug: String
  description: String
  lessons: LessonRelateToManyForCreateInput
  assignments: AssignmentRelateToManyForCreateInput
  resources: ResourceRelateToManyForCreateInput
  homeworks: HomeworkRelateToManyForCreateInput
  studies: StudyRelateToManyForCreateInput
  level: Int
  parent: TagRelateToOneForCreateInput
  children: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TagRelateToOneForCreateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
}

type Assignment {
  id: ID!
  code: String
  author: Profile
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  homework(where: HomeworkWhereInput! = {}, orderBy: [HomeworkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Homework!]
  homeworkCount(where: HomeworkWhereInput! = {}): Int
  title: String
  content: String
  settings: JSON
  public: Boolean
  isTemplate: Boolean
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input AssignmentWhereUniqueInput {
  id: ID
  code: String
}

input AssignmentWhereInput {
  AND: [AssignmentWhereInput!]
  OR: [AssignmentWhereInput!]
  NOT: [AssignmentWhereInput!]
  id: IDFilter
  code: StringFilter
  author: ProfileWhereInput
  classes: ClassManyRelationFilter
  homework: HomeworkManyRelationFilter
  title: StringFilter
  content: StringFilter
  public: BooleanFilter
  isTemplate: BooleanFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AssignmentOrderByInput {
  id: OrderDirection
  code: OrderDirection
  title: OrderDirection
  content: OrderDirection
  public: OrderDirection
  isTemplate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AssignmentUpdateInput {
  code: String
  author: ProfileRelateToOneForUpdateInput
  classes: ClassRelateToManyForUpdateInput
  homework: HomeworkRelateToManyForUpdateInput
  title: String
  content: String
  settings: JSON
  public: Boolean
  isTemplate: Boolean
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AssignmentUpdateArgs {
  where: AssignmentWhereUniqueInput!
  data: AssignmentUpdateInput!
}

input AssignmentCreateInput {
  code: String
  author: ProfileRelateToOneForCreateInput
  classes: ClassRelateToManyForCreateInput
  homework: HomeworkRelateToManyForCreateInput
  title: String
  content: String
  settings: JSON
  public: Boolean
  isTemplate: Boolean
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Resource {
  id: ID!
  code: String
  author: Profile
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  homework(where: HomeworkWhereInput! = {}, orderBy: [HomeworkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Homework!]
  homeworkCount(where: HomeworkWhereInput! = {}): Int
  title: String
  content: String
  settings: JSON
  public: Boolean
  isTemplate: Boolean
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ResourceWhereUniqueInput {
  id: ID
  code: String
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
  id: IDFilter
  code: StringFilter
  author: ProfileWhereInput
  classes: ClassManyRelationFilter
  homework: HomeworkManyRelationFilter
  title: StringFilter
  content: StringFilter
  public: BooleanFilter
  isTemplate: BooleanFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ResourceOrderByInput {
  id: OrderDirection
  code: OrderDirection
  title: OrderDirection
  content: OrderDirection
  public: OrderDirection
  isTemplate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ResourceUpdateInput {
  code: String
  author: ProfileRelateToOneForUpdateInput
  classes: ClassRelateToManyForUpdateInput
  homework: HomeworkRelateToManyForUpdateInput
  title: String
  content: String
  settings: JSON
  public: Boolean
  isTemplate: Boolean
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ResourceUpdateArgs {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateInput!
}

input ResourceCreateInput {
  code: String
  author: ProfileRelateToOneForCreateInput
  classes: ClassRelateToManyForCreateInput
  homework: HomeworkRelateToManyForCreateInput
  title: String
  content: String
  settings: JSON
  public: Boolean
  isTemplate: Boolean
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Homework {
  id: ID!
  code: String
  author: Profile
  assignment: Assignment
  resources: Resource
  title: String
  content: String
  settings: JSON
  public: Boolean
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input HomeworkWhereUniqueInput {
  id: ID
  code: String
}

input HomeworkWhereInput {
  AND: [HomeworkWhereInput!]
  OR: [HomeworkWhereInput!]
  NOT: [HomeworkWhereInput!]
  id: IDFilter
  code: StringFilter
  author: ProfileWhereInput
  assignment: AssignmentWhereInput
  resources: ResourceWhereInput
  title: StringFilter
  content: StringFilter
  public: BooleanFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input HomeworkOrderByInput {
  id: OrderDirection
  code: OrderDirection
  title: OrderDirection
  content: OrderDirection
  public: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HomeworkUpdateInput {
  code: String
  author: ProfileRelateToOneForUpdateInput
  assignment: AssignmentRelateToOneForUpdateInput
  resources: ResourceRelateToOneForUpdateInput
  title: String
  content: String
  settings: JSON
  public: Boolean
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AssignmentRelateToOneForUpdateInput {
  create: AssignmentCreateInput
  connect: AssignmentWhereUniqueInput
  disconnect: Boolean
}

input ResourceRelateToOneForUpdateInput {
  create: ResourceCreateInput
  connect: ResourceWhereUniqueInput
  disconnect: Boolean
}

input HomeworkUpdateArgs {
  where: HomeworkWhereUniqueInput!
  data: HomeworkUpdateInput!
}

input HomeworkCreateInput {
  code: String
  author: ProfileRelateToOneForCreateInput
  assignment: AssignmentRelateToOneForCreateInput
  resources: ResourceRelateToOneForCreateInput
  title: String
  content: String
  settings: JSON
  public: Boolean
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AssignmentRelateToOneForCreateInput {
  create: AssignmentCreateInput
  connect: AssignmentWhereUniqueInput
}

input ResourceRelateToOneForCreateInput {
  create: ResourceCreateInput
  connect: ResourceWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createProfile(data: ProfileCreateInput!): Profile
  createProfiles(data: [ProfileCreateInput!]!): [Profile]
  updateProfile(where: ProfileWhereUniqueInput!, data: ProfileUpdateInput!): Profile
  updateProfiles(data: [ProfileUpdateArgs!]!): [Profile]
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteProfiles(where: [ProfileWhereUniqueInput!]!): [Profile]
  createProfileImage(data: ProfileImageCreateInput!): ProfileImage
  createProfileImages(data: [ProfileImageCreateInput!]!): [ProfileImage]
  updateProfileImage(where: ProfileImageWhereUniqueInput!, data: ProfileImageUpdateInput!): ProfileImage
  updateProfileImages(data: [ProfileImageUpdateArgs!]!): [ProfileImage]
  deleteProfileImage(where: ProfileImageWhereUniqueInput!): ProfileImage
  deleteProfileImages(where: [ProfileImageWhereUniqueInput!]!): [ProfileImage]
  createPermission(data: PermissionCreateInput!): Permission
  createPermissions(data: [PermissionCreateInput!]!): [Permission]
  updatePermission(where: PermissionWhereUniqueInput!, data: PermissionUpdateInput!): Permission
  updatePermissions(data: [PermissionUpdateArgs!]!): [Permission]
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deletePermissions(where: [PermissionWhereUniqueInput!]!): [Permission]
  createClass(data: ClassCreateInput!): Class
  createClasses(data: [ClassCreateInput!]!): [Class]
  updateClass(where: ClassWhereUniqueInput!, data: ClassUpdateInput!): Class
  updateClasses(data: [ClassUpdateArgs!]!): [Class]
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteClasses(where: [ClassWhereUniqueInput!]!): [Class]
  createClassNetwork(data: ClassNetworkCreateInput!): ClassNetwork
  createClassNetworks(data: [ClassNetworkCreateInput!]!): [ClassNetwork]
  updateClassNetwork(where: ClassNetworkWhereUniqueInput!, data: ClassNetworkUpdateInput!): ClassNetwork
  updateClassNetworks(data: [ClassNetworkUpdateArgs!]!): [ClassNetwork]
  deleteClassNetwork(where: ClassNetworkWhereUniqueInput!): ClassNetwork
  deleteClassNetworks(where: [ClassNetworkWhereUniqueInput!]!): [ClassNetwork]
  createReport(data: ReportCreateInput!): Report
  createReports(data: [ReportCreateInput!]!): [Report]
  updateReport(where: ReportWhereUniqueInput!, data: ReportUpdateInput!): Report
  updateReports(data: [ReportUpdateArgs!]!): [Report]
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteReports(where: [ReportWhereUniqueInput!]!): [Report]
  createJournal(data: JournalCreateInput!): Journal
  createJournals(data: [JournalCreateInput!]!): [Journal]
  updateJournal(where: JournalWhereUniqueInput!, data: JournalUpdateInput!): Journal
  updateJournals(data: [JournalUpdateArgs!]!): [Journal]
  deleteJournal(where: JournalWhereUniqueInput!): Journal
  deleteJournals(where: [JournalWhereUniqueInput!]!): [Journal]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTalk(data: TalkCreateInput!): Talk
  createTalks(data: [TalkCreateInput!]!): [Talk]
  updateTalk(where: TalkWhereUniqueInput!, data: TalkUpdateInput!): Talk
  updateTalks(data: [TalkUpdateArgs!]!): [Talk]
  deleteTalk(where: TalkWhereUniqueInput!): Talk
  deleteTalks(where: [TalkWhereUniqueInput!]!): [Talk]
  createWord(data: WordCreateInput!): Word
  createWords(data: [WordCreateInput!]!): [Word]
  updateWord(where: WordWhereUniqueInput!, data: WordUpdateInput!): Word
  updateWords(data: [WordUpdateArgs!]!): [Word]
  deleteWord(where: WordWhereUniqueInput!): Word
  deleteWords(where: [WordWhereUniqueInput!]!): [Word]
  createTemplate(data: TemplateCreateInput!): Template
  createTemplates(data: [TemplateCreateInput!]!): [Template]
  updateTemplate(where: TemplateWhereUniqueInput!, data: TemplateUpdateInput!): Template
  updateTemplates(data: [TemplateUpdateArgs!]!): [Template]
  deleteTemplate(where: TemplateWhereUniqueInput!): Template
  deleteTemplates(where: [TemplateWhereUniqueInput!]!): [Template]
  createTask(data: TaskCreateInput!): Task
  createTasks(data: [TaskCreateInput!]!): [Task]
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TaskUpdateArgs!]!): [Task]
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
  createStudy(data: StudyCreateInput!): Study
  createStudies(data: [StudyCreateInput!]!): [Study]
  updateStudy(where: StudyWhereUniqueInput!, data: StudyUpdateInput!): Study
  updateStudies(data: [StudyUpdateArgs!]!): [Study]
  deleteStudy(where: StudyWhereUniqueInput!): Study
  deleteStudies(where: [StudyWhereUniqueInput!]!): [Study]
  createStudyImage(data: StudyImageCreateInput!): StudyImage
  createStudyImages(data: [StudyImageCreateInput!]!): [StudyImage]
  updateStudyImage(where: StudyImageWhereUniqueInput!, data: StudyImageUpdateInput!): StudyImage
  updateStudyImages(data: [StudyImageUpdateArgs!]!): [StudyImage]
  deleteStudyImage(where: StudyImageWhereUniqueInput!): StudyImage
  deleteStudyImages(where: [StudyImageWhereUniqueInput!]!): [StudyImage]
  createConsent(data: ConsentCreateInput!): Consent
  createConsents(data: [ConsentCreateInput!]!): [Consent]
  updateConsent(where: ConsentWhereUniqueInput!, data: ConsentUpdateInput!): Consent
  updateConsents(data: [ConsentUpdateArgs!]!): [Consent]
  deleteConsent(where: ConsentWhereUniqueInput!): Consent
  deleteConsents(where: [ConsentWhereUniqueInput!]!): [Consent]
  createUpdate(data: UpdateCreateInput!): Update
  createUpdates(data: [UpdateCreateInput!]!): [Update]
  updateUpdate(where: UpdateWhereUniqueInput!, data: UpdateUpdateInput!): Update
  updateUpdates(data: [UpdateUpdateArgs!]!): [Update]
  deleteUpdate(where: UpdateWhereUniqueInput!): Update
  deleteUpdates(where: [UpdateWhereUniqueInput!]!): [Update]
  createDataset(data: DatasetCreateInput!): Dataset
  createDatasets(data: [DatasetCreateInput!]!): [Dataset]
  updateDataset(where: DatasetWhereUniqueInput!, data: DatasetUpdateInput!): Dataset
  updateDatasets(data: [DatasetUpdateArgs!]!): [Dataset]
  deleteDataset(where: DatasetWhereUniqueInput!): Dataset
  deleteDatasets(where: [DatasetWhereUniqueInput!]!): [Dataset]
  createProposalBoard(data: ProposalBoardCreateInput!): ProposalBoard
  createProposalBoards(data: [ProposalBoardCreateInput!]!): [ProposalBoard]
  updateProposalBoard(where: ProposalBoardWhereUniqueInput!, data: ProposalBoardUpdateInput!): ProposalBoard
  updateProposalBoards(data: [ProposalBoardUpdateArgs!]!): [ProposalBoard]
  deleteProposalBoard(where: ProposalBoardWhereUniqueInput!): ProposalBoard
  deleteProposalBoards(where: [ProposalBoardWhereUniqueInput!]!): [ProposalBoard]
  createProposalSection(data: ProposalSectionCreateInput!): ProposalSection
  createProposalSections(data: [ProposalSectionCreateInput!]!): [ProposalSection]
  updateProposalSection(where: ProposalSectionWhereUniqueInput!, data: ProposalSectionUpdateInput!): ProposalSection
  updateProposalSections(data: [ProposalSectionUpdateArgs!]!): [ProposalSection]
  deleteProposalSection(where: ProposalSectionWhereUniqueInput!): ProposalSection
  deleteProposalSections(where: [ProposalSectionWhereUniqueInput!]!): [ProposalSection]
  createProposalCard(data: ProposalCardCreateInput!): ProposalCard
  createProposalCards(data: [ProposalCardCreateInput!]!): [ProposalCard]
  updateProposalCard(where: ProposalCardWhereUniqueInput!, data: ProposalCardUpdateInput!): ProposalCard
  updateProposalCards(data: [ProposalCardUpdateArgs!]!): [ProposalCard]
  deleteProposalCard(where: ProposalCardWhereUniqueInput!): ProposalCard
  deleteProposalCards(where: [ProposalCardWhereUniqueInput!]!): [ProposalCard]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createCurriculum(data: CurriculumCreateInput!): Curriculum
  createCurricula(data: [CurriculumCreateInput!]!): [Curriculum]
  updateCurriculum(where: CurriculumWhereUniqueInput!, data: CurriculumUpdateInput!): Curriculum
  updateCurricula(data: [CurriculumUpdateArgs!]!): [Curriculum]
  deleteCurriculum(where: CurriculumWhereUniqueInput!): Curriculum
  deleteCurricula(where: [CurriculumWhereUniqueInput!]!): [Curriculum]
  createLesson(data: LessonCreateInput!): Lesson
  createLessons(data: [LessonCreateInput!]!): [Lesson]
  updateLesson(where: LessonWhereUniqueInput!, data: LessonUpdateInput!): Lesson
  updateLessons(data: [LessonUpdateArgs!]!): [Lesson]
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteLessons(where: [LessonWhereUniqueInput!]!): [Lesson]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createAssignment(data: AssignmentCreateInput!): Assignment
  createAssignments(data: [AssignmentCreateInput!]!): [Assignment]
  updateAssignment(where: AssignmentWhereUniqueInput!, data: AssignmentUpdateInput!): Assignment
  updateAssignments(data: [AssignmentUpdateArgs!]!): [Assignment]
  deleteAssignment(where: AssignmentWhereUniqueInput!): Assignment
  deleteAssignments(where: [AssignmentWhereUniqueInput!]!): [Assignment]
  createResource(data: ResourceCreateInput!): Resource
  createResources(data: [ResourceCreateInput!]!): [Resource]
  updateResource(where: ResourceWhereUniqueInput!, data: ResourceUpdateInput!): Resource
  updateResources(data: [ResourceUpdateArgs!]!): [Resource]
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteResources(where: [ResourceWhereUniqueInput!]!): [Resource]
  createHomework(data: HomeworkCreateInput!): Homework
  createhomeworks(data: [HomeworkCreateInput!]!): [Homework]
  updateHomework(where: HomeworkWhereUniqueInput!, data: HomeworkUpdateInput!): Homework
  updatehomeworks(data: [HomeworkUpdateArgs!]!): [Homework]
  deleteHomework(where: HomeworkWhereUniqueInput!): Homework
  deletehomeworks(where: [HomeworkWhereUniqueInput!]!): [Homework]
  endSession: Boolean!
  authenticateProfileWithPassword(email: String!, password: String!): ProfileAuthenticationWithPasswordResult
  createInitialProfile(data: CreateInitialProfileInput!): ProfileAuthenticationWithPasswordSuccess!
  sendProfilePasswordResetLink(email: String!): Boolean!
  redeemProfilePasswordResetToken(email: String!, token: String!, password: String!): RedeemProfilePasswordResetTokenResult
  sendEmail(receiverId: String, header: String, body: String): Report
  copyProposalBoard(id: ID!, study: ID): ProposalBoard
  deleteProposal(id: ID!): ProposalBoard
  archiveStudy(study: ID!, isArchived: Boolean!): Profile
  googleSignup(token: String!, role: String, classCode: String): Profile
  googleLogin(token: String!): Profile
}

union ProfileAuthenticationWithPasswordResult = ProfileAuthenticationWithPasswordSuccess | ProfileAuthenticationWithPasswordFailure

type ProfileAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Profile!
}

type ProfileAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialProfileInput {
  username: String
  email: String
  password: String
}

type RedeemProfilePasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  profiles(where: ProfileWhereInput! = {}, orderBy: [ProfileOrderByInput!]! = [], take: Int, skip: Int! = 0): [Profile!]
  profile(where: ProfileWhereUniqueInput!): Profile
  profilesCount(where: ProfileWhereInput! = {}): Int
  profileImages(where: ProfileImageWhereInput! = {}, orderBy: [ProfileImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProfileImage!]
  profileImage(where: ProfileImageWhereUniqueInput!): ProfileImage
  profileImagesCount(where: ProfileImageWhereInput! = {}): Int
  permissions(where: PermissionWhereInput! = {}, orderBy: [PermissionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Permission!]
  permission(where: PermissionWhereUniqueInput!): Permission
  permissionsCount(where: PermissionWhereInput! = {}): Int
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  class(where: ClassWhereUniqueInput!): Class
  classesCount(where: ClassWhereInput! = {}): Int
  classNetworks(where: ClassNetworkWhereInput! = {}, orderBy: [ClassNetworkOrderByInput!]! = [], take: Int, skip: Int! = 0): [ClassNetwork!]
  classNetwork(where: ClassNetworkWhereUniqueInput!): ClassNetwork
  classNetworksCount(where: ClassNetworkWhereInput! = {}): Int
  reports(where: ReportWhereInput! = {}, orderBy: [ReportOrderByInput!]! = [], take: Int, skip: Int! = 0): [Report!]
  report(where: ReportWhereUniqueInput!): Report
  reportsCount(where: ReportWhereInput! = {}): Int
  journals(where: JournalWhereInput! = {}, orderBy: [JournalOrderByInput!]! = [], take: Int, skip: Int! = 0): [Journal!]
  journal(where: JournalWhereUniqueInput!): Journal
  journalsCount(where: JournalWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  talks(where: TalkWhereInput! = {}, orderBy: [TalkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Talk!]
  talk(where: TalkWhereUniqueInput!): Talk
  talksCount(where: TalkWhereInput! = {}): Int
  words(where: WordWhereInput! = {}, orderBy: [WordOrderByInput!]! = [], take: Int, skip: Int! = 0): [Word!]
  word(where: WordWhereUniqueInput!): Word
  wordsCount(where: WordWhereInput! = {}): Int
  templates(where: TemplateWhereInput! = {}, orderBy: [TemplateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Template!]
  template(where: TemplateWhereUniqueInput!): Template
  templatesCount(where: TemplateWhereInput! = {}): Int
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasksCount(where: TaskWhereInput! = {}): Int
  studies(where: StudyWhereInput! = {}, orderBy: [StudyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Study!]
  study(where: StudyWhereUniqueInput!): Study
  studiesCount(where: StudyWhereInput! = {}): Int
  studyImages(where: StudyImageWhereInput! = {}, orderBy: [StudyImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [StudyImage!]
  studyImage(where: StudyImageWhereUniqueInput!): StudyImage
  studyImagesCount(where: StudyImageWhereInput! = {}): Int
  consents(where: ConsentWhereInput! = {}, orderBy: [ConsentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Consent!]
  consent(where: ConsentWhereUniqueInput!): Consent
  consentsCount(where: ConsentWhereInput! = {}): Int
  updates(where: UpdateWhereInput! = {}, orderBy: [UpdateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Update!]
  update(where: UpdateWhereUniqueInput!): Update
  updatesCount(where: UpdateWhereInput! = {}): Int
  datasets(where: DatasetWhereInput! = {}, orderBy: [DatasetOrderByInput!]! = [], take: Int, skip: Int! = 0): [Dataset!]
  dataset(where: DatasetWhereUniqueInput!): Dataset
  datasetsCount(where: DatasetWhereInput! = {}): Int
  proposalBoards(where: ProposalBoardWhereInput! = {}, orderBy: [ProposalBoardOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProposalBoard!]
  proposalBoard(where: ProposalBoardWhereUniqueInput!): ProposalBoard
  proposalBoardsCount(where: ProposalBoardWhereInput! = {}): Int
  proposalSections(where: ProposalSectionWhereInput! = {}, orderBy: [ProposalSectionOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProposalSection!]
  proposalSection(where: ProposalSectionWhereUniqueInput!): ProposalSection
  proposalSectionsCount(where: ProposalSectionWhereInput! = {}): Int
  proposalCards(where: ProposalCardWhereInput! = {}, orderBy: [ProposalCardOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProposalCard!]
  proposalCard(where: ProposalCardWhereUniqueInput!): ProposalCard
  proposalCardsCount(where: ProposalCardWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  curricula(where: CurriculumWhereInput! = {}, orderBy: [CurriculumOrderByInput!]! = [], take: Int, skip: Int! = 0): [Curriculum!]
  curriculum(where: CurriculumWhereUniqueInput!): Curriculum
  curriculaCount(where: CurriculumWhereInput! = {}): Int
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Lesson!]
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessonsCount(where: LessonWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  assignments(where: AssignmentWhereInput! = {}, orderBy: [AssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Assignment!]
  assignment(where: AssignmentWhereUniqueInput!): Assignment
  assignmentsCount(where: AssignmentWhereInput! = {}): Int
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Resource!]
  resource(where: ResourceWhereUniqueInput!): Resource
  resourcesCount(where: ResourceWhereInput! = {}): Int
  homeworks(where: HomeworkWhereInput! = {}, orderBy: [HomeworkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Homework!]
  homework(where: HomeworkWhereUniqueInput!): Homework
  homeworksCount(where: HomeworkWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateProfilePasswordResetToken(email: String!, token: String!): ValidateProfilePasswordResetTokenResult
}

union AuthenticatedItem = Profile

type ValidateProfilePasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
